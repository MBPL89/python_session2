[
  {
    "objectID": "completed.html",
    "href": "completed.html",
    "title": "2. Beyond the Basic [Pick the title you like]",
    "section": "",
    "text": "In this part of the course we will leverage the following resources:\n\nIntro to Python book\n\n\nRun the expressions below and compare the outputs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA boolean expression is an expression that is either true or false. True and False are special values that belong to the class bool; they are not strings.\nBelow is the list of all the comparison operators:\nx == y               # x is equal to y\nx != y               # x is not equal to y\nx &gt; y                # x is greater than y\nx &lt; y                # x is less than y\nx &gt;= y               # x is greater than or equal to y\nx &lt;= y               # x is less than or equal to y\nx is y               # x is the same as y\nx is not y           # x is not the same as y\n\n\n\n\n\n\nWarning\n\n\n\nAttention!!! Do not confuse = (assignment operator) with == (comparison operator)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are three logical operators: and, or, and not. The semantics (meaning) of these operators is similar to their meaning in English. For example,\nx &gt; 0 and x &lt; 10 is true only if x is greater than 0 and less than 10.\nn%2 == 0 or n%3 == 0 is true if either of the conditions is true, that is, if the number is divisible by 2 or 3.\nFinally, the not operator negates a boolean expression, so not(x &gt; y) is true if x &gt; y is false; that is, if x is less than or equal to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly. If the logical condition is true, then the indented statement gets executed. If the logical condition is false, the indented statement is skipped.\nif condition is True :\n    do the magic here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPAY ATTENTION TO INTENDATION!!!\nLuckily Python keeps the right intendention for you but be extra careful when writing longer scripts.\n\n\nPrint Correct if y is higher than 5\n\n\n\n\n\n\n\n\nThere is no limit on the number of statements that can appear in the body, but there must be at least one. Occasionally, it is useful to have a body with no statements (usually as a place holder for code you haven’t written yet). In that case, you can use the pass statement, which does nothing.\n\n\n\n\n\n\n\n\n\n\n\nA second form of the if statement is alternative execution, in which there are two possibilities and the condition determines which one gets executed.\nif condition is True :\n    do the magic here\nelse :\n    do the other magic here\nPrint “Correct” if y is higher than 5. Otherwise, print “Incorrect”.\n\n\n\n\n\n\n\n\n\n\n\nSometimes there are more than two possibilities and we need more than two branches. One way to express a computation like that is a chained conditional:\nif condition is True :\n    do the magic here\nelif other conditon is True :\n    do the other magic here\nelse :\n    do some other stuff\n\n\n\n\n\n\n\n\nThere is no limit on the number of elif statements. If there is an else clause, it has to be at the end, but there doesn’t have to be one.\n\n\n\n\n\n\n\n\n\n\n\nOne conditional can also be nested within another. We could have written the three-branch example like this:\nif condition is True :\n    do the magic here\nelse :\n    if nested condition is True :\n        do the other magic here\n    else :\n        do some other stuff\nThe outer conditional contains two branches. The first branch contains a simple statement. The second branch contains another if statement, which has two branches of its own.\n\n\n\n\n\n\n\n\n\n\n\nConsider the followign code:\n\n\n\n\n\n\n\n\nIt is pretty simple. It just asks the user to type the temperature in Fahrenheit degrees and changes it to Celsius degrees.\nBut what happens if you type anything else than a numeber? For example, sixty instead of 60?\nThere is a conditional execution structure built into Python to handle these types of expected and unexpected errors called “try / except”. The idea of try and except is that you know that some sequence of instruction(s) may have a problem and you want to add some statements to be executed if an error occurs. These extra statements (the except block) are ignored if there is no error.\n\ntry:\n\n    [the code you want to run]\n\nexcept:\n\n    [the code that will run if the one above does not work]\nTry to rewrite the code above using the try and except. Make sure that your code prints Please enter a number if the user types something else than a number."
  },
  {
    "objectID": "completed.html#logical-operators",
    "href": "completed.html#logical-operators",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Logical operators",
    "text": "Logical operators\nThere are three logical operators: and, or, and not. The semantics (meaning) of these operators is similar to their meaning in English. For example,\nx &gt; 0 and x &lt; 10 is true only if x is greater than 0 and less than 10.\nn%2 == 0 or n%3 == 0 is true if either of the conditions is true, that is, if the number is divisible by 2 or 3.\nFinally, the not operator negates a boolean expression, so not(x &gt; y) is true if x &gt; y is false; that is, if x is less than or equal to y."
  },
  {
    "objectID": "completed.html#conditional-execution-if",
    "href": "completed.html#conditional-execution-if",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Conditional execution: if",
    "text": "Conditional execution: if\nIn order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly. If the logical condition is true, then the indented statement gets executed. If the logical condition is false, the indented statement is skipped.\n\nif condition is True :\n    do the magic here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPAY ATTENTION TO INTENDATION!!!\nLuckily Python keeps the right intendention for you but be extra careful when writing longer scripts.\n\n\nPrint Correct if y is higher than 5\n\n\n\n\n\n\n\n\nThere is no limit on the number of statements that can appear in the body, but there must be at least one. Occasionally, it is useful to have a body with no statements (usually as a place holder for code you haven’t written yet). In that case, you can use the pass statement, which does nothing."
  },
  {
    "objectID": "completed.html#alternative-execution-if-else",
    "href": "completed.html#alternative-execution-if-else",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Alternative execution: if else",
    "text": "Alternative execution: if else\nA second form of the if statement is alternative execution, in which there are two possibilities and the condition determines which one gets executed.\n\nif condition is True :\n    do the magic here\nelse :\n    do the other magic here\n\nPrint “Correct” if y is higher than 5. Otherwise, print “Incorrect”."
  },
  {
    "objectID": "completed.html#chained-conditionals-if-elif-else",
    "href": "completed.html#chained-conditionals-if-elif-else",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Chained conditionals if elif else",
    "text": "Chained conditionals if elif else\nSometimes there are more than two possibilities and we need more than two branches. One way to express a computation like that is a chained conditional:\n\nif condition is True :\n    do the magic here\nelif other conditon is True :\n    do the other magic here\nelse :\n    do some other stuff\n\n\n\n\n\n\n\n\n\nThere is no limit on the number of elif statements. If there is an else clause, it has to be at the end, but there doesn’t have to be one."
  },
  {
    "objectID": "completed.html#nested-conditionals",
    "href": "completed.html#nested-conditionals",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Nested conditionals",
    "text": "Nested conditionals\nOne conditional can also be nested within another. We could have written the three-branch example like this:\n\nif condition is True :\n    do the magic here\nelse :\n    if nested condition is True :\n        do the other magic here\n    else :\n        do some other stuff\n\nThe outer conditional contains two branches. The first branch contains a simple statement. The second branch contains another if statement, which has two branches of its own."
  },
  {
    "objectID": "completed.html#exceptions-try-and-except",
    "href": "completed.html#exceptions-try-and-except",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Exceptions: try and except",
    "text": "Exceptions: try and except\nConsider the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is pretty simple. It just asks the user to type the temperature in Fahrenheit degrees and changes it to Celsius degrees.\nBut what happens if you type anything else than a numeber? For example, sixty instead of 60?\nThere is a conditional execution structure built into Python to handle these types of expected and unexpected errors called “try / except”. The idea of try and except is that you know that some sequence of instruction(s) may have a problem and you want to add some statements to be executed if an error occurs. These extra statements (the except block) are ignored if there is no error.\n\ntry:\n\n    [the code you want to run]\n\nexcept:\n\n    [the code that will run if the one above does not work]\n\nTry to rewrite the code above using the try and except. Make sure that your code prints Please enter a number if the user types something else than a number."
  },
  {
    "objectID": "completed.html#while-loops",
    "href": "completed.html#while-loops",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "while loops",
    "text": "while loops\nComputers are often used to automate repetitive tasks. Repeating identical or similar tasks without making errors is something that computers do well and people do poorly.\nOne form of iteration in Python is the while statement.\nHere is a simple program that counts down from five and then says “Blastoff!”.\n\n\n\n\n\n\n\n\nThe flow of execution for a while statement is as follows:\n\nEvaluate the condition, yielding True or False.\nIf the condition is false, exit the while statement and continue execution at the next statement.\nIf the condition is true, execute the body and then go back to step 1.\n\nThis type of flow is called a loop because the third step loops back around to the top. We call each time we execute the body of the loop an iteration. The loop above has five iterations.\nThe body of the loop should change the value of one or more variables so that eventually the condition becomes false and the loop terminates. We call the variable that changes with each iteration the iteration variable.\nIf there is no iteration variable, the loop will repeat forever, resulting in an infinite loop.\n\nbreak\nThe loop below an infinite loop because the logical expression on the while statement is simply the logical constant True:\n\nn = 10\nwhile True:\n    print(n, end=' ')\n    n = n - 1\nprint('Done!')\n\nIf you try to run it, it will run forever (if you lready have, go to Kernel menu and select Interrupt -.- )\nHowever, we can still use this pattern to build a useful loops as long as we add break to the body of the loop. It literally breaks the loop when we have reached the exit condition.\nFor example, the loop below will run until the user types done in the prompt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontinue\nSometimes you are in an iteration of a loop and want to finish the current iteration and immediately jump to the next iteration. In that case you can use the continue statement to skip to the next iteration without finishing the body of the loop for the current iteration.\nHere is an extension of the previous code that copies its input until the user types “done”, but treats lines that start with the hash character as lines not to be printed (like Python comments). Try to run it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll the lines are printed except the one that starts with the hash sign because when the continue is executed, it ends the current iteration and jumps back to the while statement to start the next iteration, thus skipping the print statement.\n\n\nfor loops\nWhen we want to loop through a set of things such as a list of words, the lines in a file, or a list of numbers. When we have such a list of things to loop through, we can construct another type of loop using a for statement.\nWe call the while statement an indefinite loop - it simply loops until some condition becomes False.\nWe call the for loop a definite loop - it is loops through a known set of items so it runs through as many iterations as there are items in the set. Once it arrives to the end of the set, it stops.\n\n\n\n\n\n\n\n\nfriends is a list - a set of three strings (we will talk about lists next week).\nThe for loop goes through the list and executes the body once for each of the elements in the list.\nfor and in are reserved words\nfriend is the iteration variable - it changes for each iteration of the loop"
  },
  {
    "objectID": "completed.html#loop-paterns",
    "href": "completed.html#loop-paterns",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Loop paterns",
    "text": "Loop paterns\nOften we use a for or while loop to go through a list of items or the contents of a file and we are looking for something such as the largest or smallest value of the data we scan through.\nLoops are generally constructed according to this paterrn:\n\n1. Initialize one or more variables before the loop starts\n\n2. Perform some computation on each item in the loop body \n    a. possibly change the variables in the body of the loop\n\n3. Look at the resulting variables when the loop completes\n\nFor example, a simple loop counting elements of a list would look like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImages and GIFs Disclaimer: Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.\n\n\n\n\n\n\n  \n  \n    © 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Biagio Palese"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "",
    "text": "In this part of the course we will leverage the following resources:\n\nIntro to Python book\n\n\nRun the expressions below and compare the outputs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA boolean expression is an expression that is either true or false. True and False are special values that belong to the class bool; they are not strings.\nBelow is the list of all the comparison operators:\nx == y               # x is equal to y\nx != y               # x is not equal to y\nx &gt; y                # x is greater than y\nx &lt; y                # x is less than y\nx &gt;= y               # x is greater than or equal to y\nx &lt;= y               # x is less than or equal to y\nx is y               # x is the same as y\nx is not y           # x is not the same as y\n\n\n\n\n\n\nWarning\n\n\n\nAttention!!! Do not confuse = (assignment operator) with == (comparison operator)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are three logical operators: and, or, and not. The semantics (meaning) of these operators is similar to their meaning in English. For example,\nx &gt; 0 and x &lt; 10 is true only if x is greater than 0 and less than 10.\nn%2 == 0 or n%3 == 0 is true if either of the conditions is true, that is, if the number is divisible by 2 or 3.\nFinally, the not operator negates a boolean expression, so not(x &gt; y) is true if x &gt; y is false; that is, if x is less than or equal to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly. If the logical condition is true, then the indented statement gets executed. If the logical condition is false, the indented statement is skipped.\nif condition is True :\n    do the magic here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPAY ATTENTION TO INTENDATION!!!\nLuckily Python keeps the right intendention for you but be extra careful when writing longer scripts.\n\n\nPrint Correct if y is higher than 5\n\n\n\n\n\n\n\n\nThere is no limit on the number of statements that can appear in the body, but there must be at least one. Occasionally, it is useful to have a body with no statements (usually as a place holder for code you haven’t written yet). In that case, you can use the pass statement, which does nothing.\n\n\n\n\n\n\n\n\n\n\n\nA second form of the if statement is alternative execution, in which there are two possibilities and the condition determines which one gets executed.\nif condition is True :\n    do the magic here\nelse :\n    do the other magic here\nPrint “Correct” if y is higher than 5. Otherwise, print “Incorrect”.\n\n\n\n\n\n\n\n\n\n\n\nSometimes there are more than two possibilities and we need more than two branches. One way to express a computation like that is a chained conditional:\nif condition is True :\n    do the magic here\nelif other conditon is True :\n    do the other magic here\nelse :\n    do some other stuff\n\n\n\n\n\n\n\n\nThere is no limit on the number of elif statements. If there is an else clause, it has to be at the end, but there doesn’t have to be one.\n\n\n\n\n\n\n\n\n\n\n\nOne conditional can also be nested within another. We could have written the three-branch example like this:\nif condition is True :\n    do the magic here\nelse :\n    if nested condition is True :\n        do the other magic here\n    else :\n        do some other stuff\nThe outer conditional contains two branches. The first branch contains a simple statement. The second branch contains another if statement, which has two branches of its own.\n\n\n\n\n\n\n\n\n\n\n\nConsider the followign code:\n\n\n\n\n\n\n\n\nIt is pretty simple. It just asks the user to type the temperature in Fahrenheit degrees and changes it to Celsius degrees.\nBut what happens if you type anything else than a numeber? For example, sixty instead of 60?\nThere is a conditional execution structure built into Python to handle these types of expected and unexpected errors called “try / except”. The idea of try and except is that you know that some sequence of instruction(s) may have a problem and you want to add some statements to be executed if an error occurs. These extra statements (the except block) are ignored if there is no error.\n\ntry:\n\n    [the code you want to run]\n\nexcept:\n\n    [the code that will run if the one above does not work]\nTry to rewrite the code above using the try and except. Make sure that your code prints Please enter a number if the user types something else than a number."
  },
  {
    "objectID": "index.html#logical-operators",
    "href": "index.html#logical-operators",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Logical operators",
    "text": "Logical operators\nThere are three logical operators: and, or, and not. The semantics (meaning) of these operators is similar to their meaning in English. For example,\nx &gt; 0 and x &lt; 10 is true only if x is greater than 0 and less than 10.\nn%2 == 0 or n%3 == 0 is true if either of the conditions is true, that is, if the number is divisible by 2 or 3.\nFinally, the not operator negates a boolean expression, so not(x &gt; y) is true if x &gt; y is false; that is, if x is less than or equal to y."
  },
  {
    "objectID": "index.html#conditional-execution-if",
    "href": "index.html#conditional-execution-if",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Conditional execution: if",
    "text": "Conditional execution: if\nIn order to write useful programs, we almost always need the ability to check conditions and change the behavior of the program accordingly. If the logical condition is true, then the indented statement gets executed. If the logical condition is false, the indented statement is skipped.\n\nif condition is True :\n    do the magic here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPAY ATTENTION TO INTENDATION!!!\nLuckily Python keeps the right intendention for you but be extra careful when writing longer scripts.\n\n\nPrint Correct if y is higher than 5\n\n\n\n\n\n\n\n\nThere is no limit on the number of statements that can appear in the body, but there must be at least one. Occasionally, it is useful to have a body with no statements (usually as a place holder for code you haven’t written yet). In that case, you can use the pass statement, which does nothing."
  },
  {
    "objectID": "index.html#alternative-execution-if-else",
    "href": "index.html#alternative-execution-if-else",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Alternative execution: if else",
    "text": "Alternative execution: if else\nA second form of the if statement is alternative execution, in which there are two possibilities and the condition determines which one gets executed.\n\nif condition is True :\n    do the magic here\nelse :\n    do the other magic here\n\nPrint “Correct” if y is higher than 5. Otherwise, print “Incorrect”."
  },
  {
    "objectID": "index.html#chained-conditionals-if-elif-else",
    "href": "index.html#chained-conditionals-if-elif-else",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Chained conditionals if elif else",
    "text": "Chained conditionals if elif else\nSometimes there are more than two possibilities and we need more than two branches. One way to express a computation like that is a chained conditional:\n\nif condition is True :\n    do the magic here\nelif other conditon is True :\n    do the other magic here\nelse :\n    do some other stuff\n\n\n\n\n\n\n\n\n\nThere is no limit on the number of elif statements. If there is an else clause, it has to be at the end, but there doesn’t have to be one."
  },
  {
    "objectID": "index.html#nested-conditionals",
    "href": "index.html#nested-conditionals",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Nested conditionals",
    "text": "Nested conditionals\nOne conditional can also be nested within another. We could have written the three-branch example like this:\n\nif condition is True :\n    do the magic here\nelse :\n    if nested condition is True :\n        do the other magic here\n    else :\n        do some other stuff\n\nThe outer conditional contains two branches. The first branch contains a simple statement. The second branch contains another if statement, which has two branches of its own."
  },
  {
    "objectID": "index.html#exceptions-try-and-except",
    "href": "index.html#exceptions-try-and-except",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Exceptions: try and except",
    "text": "Exceptions: try and except\nConsider the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is pretty simple. It just asks the user to type the temperature in Fahrenheit degrees and changes it to Celsius degrees.\nBut what happens if you type anything else than a numeber? For example, sixty instead of 60?\nThere is a conditional execution structure built into Python to handle these types of expected and unexpected errors called “try / except”. The idea of try and except is that you know that some sequence of instruction(s) may have a problem and you want to add some statements to be executed if an error occurs. These extra statements (the except block) are ignored if there is no error.\n\ntry:\n\n    [the code you want to run]\n\nexcept:\n\n    [the code that will run if the one above does not work]\n\nTry to rewrite the code above using the try and except. Make sure that your code prints Please enter a number if the user types something else than a number."
  },
  {
    "objectID": "index.html#while-loops",
    "href": "index.html#while-loops",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "while loops",
    "text": "while loops\nComputers are often used to automate repetitive tasks. Repeating identical or similar tasks without making errors is something that computers do well and people do poorly.\nOne form of iteration in Python is the while statement.\nHere is a simple program that counts down from five and then says “Blastoff!”.\n\n\n\n\n\n\n\n\nThe flow of execution for a while statement is as follows:\n\nEvaluate the condition, yielding True or False.\nIf the condition is false, exit the while statement and continue execution at the next statement.\nIf the condition is true, execute the body and then go back to step 1.\n\nThis type of flow is called a loop because the third step loops back around to the top. We call each time we execute the body of the loop an iteration. The loop above has five iterations.\nThe body of the loop should change the value of one or more variables so that eventually the condition becomes false and the loop terminates. We call the variable that changes with each iteration the iteration variable.\nIf there is no iteration variable, the loop will repeat forever, resulting in an infinite loop.\n\nbreak\nThe loop below an infinite loop because the logical expression on the while statement is simply the logical constant True:\n\nn = 10\nwhile True:\n    print(n, end=' ')\n    n = n - 1\nprint('Done!')\n\nIf you try to run it, it will run forever (if you lready have, go to Kernel menu and select Interrupt -.- )\nHowever, we can still use this pattern to build a useful loops as long as we add break to the body of the loop. It literally breaks the loop when we have reached the exit condition.\nFor example, the loop below will run until the user types done in the prompt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontinue\nSometimes you are in an iteration of a loop and want to finish the current iteration and immediately jump to the next iteration. In that case you can use the continue statement to skip to the next iteration without finishing the body of the loop for the current iteration.\nHere is an extension of the previous code that copies its input until the user types “done”, but treats lines that start with the hash character as lines not to be printed (like Python comments). Try to run it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll the lines are printed except the one that starts with the hash sign because when the continue is executed, it ends the current iteration and jumps back to the while statement to start the next iteration, thus skipping the print statement.\n\n\nfor loops\nWhen we want to loop through a set of things such as a list of words, the lines in a file, or a list of numbers. When we have such a list of things to loop through, we can construct another type of loop using a for statement.\nWe call the while statement an indefinite loop - it simply loops until some condition becomes False.\nWe call the for loop a definite loop - it is loops through a known set of items so it runs through as many iterations as there are items in the set. Once it arrives to the end of the set, it stops.\n\n\n\n\n\n\n\n\nfriends is a list - a set of three strings (we will talk about lists next week).\nThe for loop goes through the list and executes the body once for each of the elements in the list.\nfor and in are reserved words\nfriend is the iteration variable - it changes for each iteration of the loop"
  },
  {
    "objectID": "index.html#loop-paterns",
    "href": "index.html#loop-paterns",
    "title": "2. Beyond the Basic: Conditional and Iterations",
    "section": "Loop paterns",
    "text": "Loop paterns\nOften we use a for or while loop to go through a list of items or the contents of a file and we are looking for something such as the largest or smallest value of the data we scan through.\nLoops are generally constructed according to this paterrn:\n\n1. Initialize one or more variables before the loop starts\n\n2. Perform some computation on each item in the loop body \n    a. possibly change the variables in the body of the loop\n\n3. Look at the resulting variables when the loop completes\n\nFor example, a simple loop counting elements of a list would look like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImages and GIFs Disclaimer: Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.\n\n\n\n\n\n\n  \n  \n    © 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Biagio Palese"
  },
  {
    "objectID": "p3-conditional-iteration.html#conditional-execution",
    "href": "p3-conditional-iteration.html#conditional-execution",
    "title": "2. Beyond the Basic. Practice: Conditional and Iterations",
    "section": "Conditional execution",
    "text": "Conditional execution\n\nRewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above 40 hours.\n\nEnter Hours: 45 \nEnter Rate: 10 \nPay: 475.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nRewrite your pay program using try and except so that your program handles non-numeric input gracefully by printing a message and exiting the program. The following shows two executions of the program:\n\nEnter Hours: 20 \nEnter Rate: nine Error, please enter numeric input\nEnter Hours: forty Error, please enter numeric input\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n\n\n\nScore\nGrade\n\n\n\n\n&gt;= 0.9\nA\n\n\n&gt;= 0.8\nB\n\n\n&gt;= 0.7\nC\n\n\n&gt;= 0.6\nD\n\n\n&lt; 0.6\nF\n\n\n\nEnter score: 0.95 \nA\nEnter score: perfect Bad score\nEnter score: 10.0 Bad score\nEnter score: 0.75 \nC\nEnter score: 0.5 \nF\nRun the program repeatedly as shown above to test the various different values for input.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program which repeatedly reads numbers until the user enters “done”. Once “done” is entered, print out the total, count, and average of the numbers. If the user enters anything other than a number, detect their mistake using try and except and print an error message and skip to the next number. If the user enters “done” without entering any number, print a proper message when giving the average.\n\nEnter a number: 4 \nEnter a number: 5 \nEnter a number: bad data Invalid input \nEnter a number: 7 \nEnter a number: done \nTotal: 16 \nCount: 3 \n5.333333333333333\nEnter a number: done \nTotal: 0 \nCount: 0 \nCount is 0. Impossible to calculate the average\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow improve your score conversion program (from exercise 3) by using appropriate error catching when the user does not input a number and by using a loop to continuously accept input until the user types ‘done’\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite another program that prompts the user for numbers until the user types “done.” At that point the program prints out both the maximum and minimum of the numbers (instead of the total, count, and average).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    © 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Biagio Palese"
  },
  {
    "objectID": "p3-conditional-iteration-solved.html",
    "href": "p3-conditional-iteration-solved.html",
    "title": "2. Beyond the Basic. Practice: Solution",
    "section": "",
    "text": "Rewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above 40 hours.\n\nEnter Hours: 45 Enter Rate: 10 Pay: 475.0\n\n\n\n\n\n\n\nRewrite your pay program using try and except so that your program handles non-numeric input gracefully by printing a message and exiting the program. The following shows two executions of the program:\n\nEnter Hours: 20 Enter Rate: nine Error, please enter numeric input\n\nEnter Hours: forty Error, please enter numeric input\n\n\n\n\n\n\n\nWrite a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n Score   Grade\n&gt;= 0.9     A\n&gt;= 0.8     B\n&gt;= 0.7     C\n&gt;= 0.6     D\n &lt; 0.6     F```\n \n\n\n`Enter score: 0.95\nA`\n\n-----------------\n\n`Enter score: perfect\nBad score`\n\n-----------------\n\n`Enter score: 10.0\nBad score`\n\n-----------------\n\n`Enter score: 0.75\nC`\n\n-----------------\n\n`Enter score: 0.5\nF`\n\nRun the program repeatedly as shown above to test the various different values for input.\n\n```{pyodide}\n# Note, this program does not enforce error catching\n# beacuse we are not asked to do it (we know the program is not robust)\n#\n# Collect input and convert to floating point number\ninp = input('Please enter score to convert: ')\nscore = float(inp)\n\n# Ensure it is within acceptable range of values that can be meaningfully converted\nif score &gt;= 0 and score &lt;= 1 :\n    if score &gt;= 0.9 :\n        print('A')\n    elif score &gt;= 0.8 :\n        print('B')\n    elif score &gt;= 0.7 :\n        print('C')\n    elif score &gt;= 0.6 :\n        print('D')\n    else :\n        print('F')\nelse :\n    print('Error, the score provided is out of acceptable range')\n\nWrite a program which repeatedly reads numbers until the user enters “done”. Once “done” is entered, print out the total, count, and average of the numbers. If the user enters anything other than a number, detect their mistake using try and except and print an error message and skip to the next number. If the user enters “done” without entering any number, print a proper message when giving the average.\n\nEnter a number: 4 Enter a number: 5 Enter a number: bad data Invalid input Enter a number: 7 Enter a number: done 16 3 5.333333333333333\n\nEnter a number: done Total: 0 Count: 0 Count is 0. Impossible to calculate the average\n\n\n\n\n\n\n\nNow improve your score conversion program (from exercise 3) by using appropriate error catching when the user does not input a number and by using a loop to continuously accept input until the user types ‘done’\n\n\n\n\n\n\n\n\nWrite another program that prompts the user for numbers until the user types “done.” At that point the program prints out both the maximum and minimum of the numbers (instead of the total, count, and average)."
  },
  {
    "objectID": "p3-conditional-iteration-solved.html#conditional-execution",
    "href": "p3-conditional-iteration-solved.html#conditional-execution",
    "title": "2. Beyond the Basic. Practice: Solution",
    "section": "Conditional execution",
    "text": "Conditional execution\n\nRewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above 40 hours.\n\nEnter Hours: 45 \nEnter Rate: 10 \nPay: 475.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nRewrite your pay program using try and except so that your program handles non-numeric input gracefully by printing a message and exiting the program. The following shows two executions of the program:\n\nEnter Hours: 20 \nEnter Rate: nine Error, please enter numeric input\nEnter Hours: forty Error, please enter numeric input\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n\n\n\nScore\nGrade\n\n\n\n\n&gt;= 0.9\nA\n\n\n&gt;= 0.8\nB\n\n\n&gt;= 0.7\nC\n\n\n&gt;= 0.6\nD\n\n\n&lt; 0.6\nF\n\n\n\nEnter score: 0.95 \nA\nEnter score: perfect Bad score\nEnter score: 10.0 Bad score\nEnter score: 0.75 \nC\nEnter score: 0.5 \nF\nRun the program repeatedly as shown above to test the various different values for input.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program which repeatedly reads numbers until the user enters “done”. Once “done” is entered, print out the total, count, and average of the numbers. If the user enters anything other than a number, detect their mistake using try and except and print an error message and skip to the next number. If the user enters “done” without entering any number, print a proper message when giving the average.\n\nEnter a number: 4 \nEnter a number: 5 \nEnter a number: bad data Invalid input \nEnter a number: 7 \nEnter a number: done \nTotal: 16 \nCount: 3 \n5.333333333333333\nEnter a number: done \nTotal: 0 \nCount: 0 \nCount is 0. Impossible to calculate the average\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow improve your score conversion program (from exercise 3) by using appropriate error catching when the user does not input a number and by using a loop to continuously accept input until the user types ‘done’\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite another program that prompts the user for numbers until the user types “done.” At that point the program prints out both the maximum and minimum of the numbers (instead of the total, count, and average).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    © 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Biagio Palese"
  }
]