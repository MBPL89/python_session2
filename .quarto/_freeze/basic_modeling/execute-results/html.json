{
  "hash": "0ef6d9e06d21aa4a02020c95a4ca0b24",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 5 Starter File\"\nauthor: \"Biagio Palese\"\nengine: knitr\nformat: live-html\nwebr:\n  packages:\n    - tidyverse\n    - ggthemes\n    - scales\n    - ggrepel\n    - patchwork\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n::: {.cell}\n\n:::\n\n\n\n## Intermediate Visualizations\n\n![Coding is fun!!!](gif/coding_is_fun.gif){width=\"700\"}\n\nThe following sections of the book ([R for Data Science](https://r4ds.hadley.nz)) used for the first portion of the course are included in the first week:\n\n-   [Data Viz: Chapter 1](https://r4ds.hadley.nz/data-visualize)\n\n-   [Data Viz: Chapter 9](https://r4ds.hadley.nz/layers)\n\n## Link to other resources\n\n-   Internal help: [posit support](https://support.posit.co/hc/en-us){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important;\"}\n\n-   External help: [stackoverflow](https://stackoverflow.com/search?q=rstudio&s=25d8522e-3191-4bf2-ae3b-ccad762aeca9){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important;\"}\n\n-   Additional materials: [posit resources](https://posit.co/resources/){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important;\"}\n\n-   Cheat Sheets: [posit cheat sheets](https://posit.co/resources/cheatsheets/){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important; margin-bottom: 0.1em;\"}\n\n-   Choose the right chart: [R charts guide](https://www.data-to-viz.com){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important; margin-bottom: 0.1em;\"}\n\n-   Getting Inspired: [R charts examples](https://r-graph-gallery.com/#subscribeModal){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important; margin-bottom: 0.1em;\"}\n\n-   Extending ggplot: [ggplot extensions](https://exts.ggplot2.tidyverse.org/){style=\"text-decoration: underline; color: rgb(0, 0, 255) !important; margin-bottom: 0.1em;\"}\n\nWhile I use the book as a reference the materials provided to you are custom made and include more activities and resources.\n\nIf you understand the materials covered in this document there is no need to refer to other resources.\n\nIf you have any troubles with the materials don't hesitate to contact me or check the above resources.\n\n# Going beyond the basic\n\nIn the basic data visualization class, we built a solid foundation, learning how to create compelling charts with ggplot2. We explored the essential template of a plot, how to control aesthetics like axes mapping, color, fill, size, alpha, and shape. We emphasized the importance of understanding your data, focusing on the columns data type and chart objective to make informed decisions when choosing the right chart. By working with distribution, ranking, correlation, and evolution charts, you gained hands-on experience with some of the most commonly used geoms and you‚Äôve gotten a taste of how powerful visualizations can be in uncovering insights from your data.\n\nNow, as we transition into the beyond basic data visualization class, we will build on this foundation and take your skills to the next level. We‚Äôll delve into more advanced topics like static mapping to fix aesthetics to specific values, faceting to create multiple subplots for better comparison, and using multiple geoms in a single plot to enrich your visualizations. The tools covered in this class will open up new ways to explore, present, and gain deeper insights from your data. Get ready to elevate your skills and bring your data to life in ways that will captivate your audience!\n\n![Beyond the basic: Chart 1 inspired from [R4DS book](https://r4ds.hadley.nz/communication)](images/beyond_basic1.png){width=\"700\"}\n\n![Beyond the basic: Chart 2 inspired from [R4DS book](https://r4ds.hadley.nz/communication)](images/beyond_basic2.png){width=\"700\"}\n\n## Load packages\n\nThis is a critical task:\n\n-   Every time you open a new R session you will need to load the packages.\n\n-   Failing to do so will incur in the most common errors among beginners (e.g., \" could not find function 'x' \" or \"object 'y' not found\").\n\n-   So please always remember to load your packages by running the `library` function for each package you will use in that specific session ü§ù\n\n\n::: {.cell autorun='false' startover='false'}\n```{webr}\n#| autorun: false\n#| startover: false\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(patchwork)\n```\n:::\n\n\n## Ggplot chart template\n\n::: callout-important\n`ggplot(data = <DATA>, mapping = aes(<MAPPINGS>)) +   <GEOM_FUNCTION>()`\n:::\n\nLet's learn how to complete and extend this template beyond the basic.\n\n## Static mapping\n\nSo far, we‚Äôve seen that when you map an aesthetic to a variable, the `ggplot2` package automatically handles the rest. It dynamically selects an appropriate scale for the aesthetic and even generates a legend to explain the relationship between the variable and its visual representation. For aesthetics like x and y, instead of a legend, ggplot2 creates axis lines with tick marks and labels, which serve as guides, showing how data points correspond to values.\n\nBut what if you want more control? What if you want to manually adjust the layout of your chart to better fit your needs/preferences? Can you do that?\n\nThe answer is yes! Let‚Äôs explore how.\n\n::: {.panel-tabset .nav-pills}\n## Original chart\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()\n\n```\n:::\n\n\n## Change color\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(color = \"blue\")\n\n```\n:::\n\n\n-   we simply specify the color we want inside the geom using the `color` argument. Remember that colors are strings!\n\n## Change size\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(size = 2)\n```\n:::\n\n\n-   we simply specify the size we want inside the geom using the `size` argument. Remember that size is measured in millimiters!\n\n## Change shape\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(shape = 18)\n\n```\n:::\n\n\n-   we simply specify the shape we want inside the geom using the `shape` argument. Remember that there are many shapes available and they are identified by numbers (see figure below for more info)!\n\n## All together\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +\n  geom_point(color = \"blue\", size= 2, shape= 18)\n\n```\n:::\n\n\n::: callout-note\nIn the chart above `color`, `size` and `shape` are not dynamically mapped to a variable but rather manually/statically assigned by you. `Static mapping` only help to change the look/physical appearance of your chart but it doesn't add more information compared to the original chart!\n:::\n:::\n\n::: callout-important\nTo set an aesthetics (color, size., shape) manually/statically, set them by name as an argument of your geom function; i.e. they go outside of `aes()` and do not map them to a variable!\n:::\n\nMoreover, you need to pick a level that makes sense for that aesthetic:\n\n-   The name of a color as a character string (\"blue\").\n\n-   The size of a point in mm (2).\n\n-   The shape of a point as a number (18), see figure below.\n\n![List of static shapes: source [R4DS book](https://r4ds.hadley.nz/layers#fig-shapes)](images/static_shapes.png)\n\nLet's create a few more charts to practice static mapping:\n\n::: {.panel-tabset .nav-pills}\n## Example 1\n\nLet's now check the distribution of highway fuel efficiency among the cars in this dataset:\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = hwy)) + \n  geom_histogram(color= \"purple\")\n\n```\n:::\n\n\nWhat happens if I try fill?\n\n## Example 2\n\nLet's now check the distribution of hwy by car class using a boxplot.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\nggplot(data = mpg, mapping = aes(x = class, y = hwy)) + \n  geom_boxplot(fill= \"lightblue\", size= 4)\n\n```\n:::\n\n\nDoes size help here to improve the chart appearance? Try without it!\n\n## Example 3\n\nCreate a violin chart that show the distribution of `cty` (`y axis`) by `drv` (`x axis`). Make sure the violin distributions are filled with dark gold color (\"gold4\").\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\nDo you like the color? Change it with your favorite color!\n\n## Example 4\n\nCreate a scatterplot that shows the relationship between cylinders and city fuel efficiency. Change the color to grey, size to 3 mm and shape to 12.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\nDo you like this chart? Try to improve its look with your artistic touch!\n:::\n\n#### Activity 1 (a & b in class c & d at home): Charts with static mapping - 5 minutes:\n\n*\\[Write code just below each instruction; finally use MS Teams R - Forum channel for help on the in class activities/homework or if you have other questions\\]*\n\n::: {.panel-tabset .nav-pills}\n## Activity 1a.\n\nCreate a bar chart that show the engine size distribution on the y axis and use different shape for each car class. Make sure the color of the bar is red.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\nWhat do you notice?\n\n## Activity 1b.\n\nCreate a boxplot between the city fuel efficiency (y) and fl (x). Make sure that the boxplot are filled with a pink color.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 1c.\n\nCreate a bar chart that show the drv ranking on the x axis. Make sure the color of the bar is yellow.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 1d.\n\nCreate a scatterplot between the city fuel efficiency (y) and number of cylinders (x) assign a different size to each class. Make sure that the points color is orange and the shape of the points is 2.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n:::\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{webr}\n#| autorun: false\n#| min-lines: 3\n\n\n#Code Practice Chunk\n\n```\n:::\n\n\n*Knowledge Check 1*\n\n![](images/kc1.png)\n\nQuestion: What static mapping was used in the chart above?\n\n```         \n- answer 1: color, size, shape\n- answer 2: color, shape\n- answer 3: color, size\n- answer 4: fill, size, shape\n```\n\n## Faceting\n\nOne powerful way to incorporate additional variables into a chart is by mapping them dynamically through aesthetics inside the `aes()` function. However, especially when working with categorical variables, another effective method is to use faceting, which splits your plot into multiple subplots‚Äîeach displaying a subset of the data. This is almost like visually 'grouping' your data, similar to how we used `group_by()` in data manipulation. However, instead of summarizing values, faceting allows us to see the observations within each group displayed in separate charts, making patterns or differences easier to spot.\n\nTo facet your chart by a single variable, you can use `facet_wrap()`, where the variable passed should be discrete. If you want to facet by the combination of two variables, you can apply `facet_grid()`, allowing you to create a matrix of plots that can reveal deeper insights into your data‚Äôs structure.\n\n::: {.panel-tabset .nav-pills}\n## Original chart\n\nJust for reference I am putting the original chart here. This way it will be easier to see the impact of faceting.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()\n\n```\n:::\n\n\n## Facet wrap 1\n\nNow, we facet on one categorical variable.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()+\n  facet_wrap(vars(class))\n\n```\n:::\n\n\n## Facet wrap 2\n\nOr...\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()+\n  facet_wrap(~class)\n\n```\n:::\n\n\n## Facet grid 1\n\nNow, we facet on two categorical variables.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()+\n  facet_grid(vars(class), vars(drv))\n\n```\n:::\n\n\n## Facet grid 2\n\nOr...\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()+\n  facet_grid(class~drv)\n\n```\n:::\n\n:::\n\n::: {.panel-tabset .nav-pills}\n## Example 1\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_wrap(vars(trans), nrow = 2)\n\n#or\n# ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n#   geom_point() + \n#   facet_wrap(~trans, nrow = 2)\n```\n:::\n\n\nWhat is the `nrow` argument doing?\n\n## Example 2\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_grid(vars(drv), vars(cyl))#\n\n#or\n# ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n#   geom_point() + \n#   facet_grid(drv ~ cyl)#The first argument of facet_grid() is also a formula. This time the formula should contain two variable names separated by a ~\n\n```\n:::\n\n\nThis time you are faceting on two variables. What do you notice?\n\nThere are some combinations of values that do not have data points in your dataset. For example 5 cyl and all wheel drive. This gives you also an indication of the most common configurations of car based on cyl and drive mode and how they behave in terms of consumption. 4 cyl, front wheel drive seems to have the best high way gas mileage.\n\n## Example 3\n\nCreate a boxplot that shows the distribution of cty (`x axis`) by manufacturer (`y axis`). Make sure to have a separate plot for each `drv` value.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Example 4\n\nCreate a smoothingline plot that shows the relationship between `hwy` (`y axis`) and `displ` (`x axis`). Moreover, make sure to create mini plots based on the `drv` and `fl` variables.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n:::\n\n### Activity 2 (a & b in class c & d at home): Charts with faceting - 7 minutes:\n\n*\\[Write code just below each instruction; finally use MS Teams R - Forum channel for help on the in class activities/homework or if you have other questions\\]*\n\n::: {.panel-tabset .nav-pills}\n## Activity 2a.\n\nCreate a scatterplot between the highway fuel efficiency (y) and number of cylinders (x) assign a different color to each `drv`. Make sure to facet by `class` and to show the subplots on 2 rows.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 2b.\n\nCreate a boxplot of the city fuel efficiency (y) and engine size (x) assign a different color to each `drv`. Make sure to facet by `manufacturer` and `trans`.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\nWhat do you think about this chart?\n\n## Activity 2c.\n\nCreate a bar chart between the highway fuel efficiency (x) and manufacturer (y) assign a different `fill` to each `cyl`. Make sure to facet by `trans` and `drv`.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 2d.\n\nCreate a violin chart between the highway fuel efficiency (x) and class (y) assign a different color to each `class`. Make sure to facet by `drv`.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n:::\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{webr}\n#| autorun: false\n#| min-lines: 3\n\n\n#Code Practice Chunk\n\n```\n:::\n\n\n### More on geometric objects\n\nA geom is the geometric shape a plot uses to represent data. We've already discussed how choosing the right geom is essential and how much the different geoms impact the final outcome of your visual. But beyond selecting the right geom, it's important to understand how aesthetics like color, size, and shape can vary depending on the geom you choose.\n\nEach geom interprets these aesthetics differently, so by changing the geom, you‚Äôre not just changing the chart type‚Äîyou‚Äôre also affecting how the visual elements are displayed, giving your plot more depth and meaning. From now on, when you change the geom remember that you probably need to change also the aesthetics used.\n\n::: {.panel-tabset .nav-pills}\n## Point + shape\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, shape = drv)) + \n  geom_point()\n\n```\n:::\n\n\n## Smooth + shape\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, shape = drv)) + \n  geom_smooth()\n```\n:::\n\n\n## Point + linetype\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) + \n  geom_point()\n\n```\n:::\n\n\n## Smooth + linetype\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) + \n  geom_smooth()\n\n```\n:::\n\n:::\n\n::: callout-caution\nEvery geom function in ggplot2 takes a mapping argument. However, not every aesthetic works with every geom. For example: you could set the shape of a point, but you couldn‚Äôt set the ‚Äúshape‚Äù of a line. On the other hand, you could set the linetype of a line and not of a point. geom_smooth() will draw a different line, with a different linetype, for each unique value of the variable that you map to linetype.\n\nIn the above examples geom_smooth() separates the cars into three lines based on their drv value, which describes a car‚Äôs drive train. This way you can see how the drive train impact the relationship between hwy and engine size. Remember, 4 stands for four-wheel drive, f for front-wheel drive, and r for rear-wheel drive.\n\nNotice the warning and that the shape of the line doesn't change but it still distinguish 3 separate line. The problem is that you can't determine which one is which.\n:::\n\n## Multiple geoms on the same chart\n\nOne of the powerful features of ggplot2 is the ability to layer multiple geoms on the same chart. This allows you to combine different visual elements and create more insightful visualizations. For example, you might use points to represent individual data values while overlaying a smooth line to show a trend. By layering geoms, you're able to reveal different aspects of your data in one cohesive view, enriching the story your visualization tells. The flexibility of multiple geoms opens up new ways to highlight patterns, relationships, and trends that might not be as clear with a single geom.\n\nBecause we are inserting the `mapping` inside the `ggplot()` function the `ggplot2` package will treat these mappings as `global mappings` that apply to each geom in the graph. So, adding a second geom is as simple as adding a new layer. Let's check how in the examples below:\n\n::: {.panel-tabset .nav-pills}\n## Point+Smooth\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  geom_smooth()\n```\n:::\n\n\n## Smooth+Point\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_smooth()+\n  geom_point()\n```\n:::\n\n\n## Boxplot+Violin\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = drv, y = hwy)) + \n  geom_boxplot()+\n  geom_violin()\n```\n:::\n\n\nTry to set a static mapping `alpha` of 0.3 and `width` to 1.4 in the geom_violin.\n\n## Violin+Boxplot\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = drv, y = hwy)) + \n  geom_violin()+\n  geom_boxplot()\n\n```\n:::\n\n\nTry to set a static mapping `alpha` to 0.3 and `width` to 0.15 in the geom_boxplot.\n:::\n\n::: callout-important\nThe order in which you layer geoms significantly affects the final visualization, much like stacking one chart on top of another. The layering sequence matters because elements added later can obscure or enhance the ones added before. Think of it as building up the plot step by step.\n\nJust as the `|>` operator in data manipulation allows you to chain operations, the `+` in ggplot2 lets you seamlessly stack layers in your plot. Understanding this parallel helps you see how both data manipulation and visualization follow a logical flow of transformation and refinement.\n:::\n\n#### Activity 3 (a & b in class c & d at home): Multiple geoms charts. - 7 minutes\n\n*\\[Write code just below each instruction; finally use MS Teams R - Forum channel for help on the in class activities/homework or if you have other questions\\]*\n\n::: {.panel-tabset .nav-pills}\n## Activity 3a.\n\nPlot the distribution of `cty` (`y axis`) by `class` (`x axis`) with both a `violin` and a `boxplot` chart. Make sure each `class` is filled with a different color.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 3b.\n\nPlot the relationship between `hwy` (`y axis`) and `displ` (`x axis`) with both points and a smoothing line. Make sure to have different color for each `drv`.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 3c.\n\nPlot the relationship between `cty` (`y axis`) and `displ` (`x axis`) with both a smoothing line and points. Make sure to have different color for each `class`.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 3d.\n\nPlot the distribution of `hwy` (`y axis`) by `trans` (`x axis`) with both a `boxplot` and a `violin` chart. Make sure each `trans` has a different color.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n:::\n\n## Ggplot's real superpower: combining global with local mappings\n\nCombining `global` and `local` mappings allows for flexible control over your visualizations. When you define mappings inside a geom function, they are considered local mappings‚Äîspecific to that layer only. These local mappings can either add to or override the global mappings defined in the main ggplot() call, giving you the power to display different aesthetics across different layers of your chart. This technique is particularly useful when you want certain layers to stand out with unique colors, shapes, or sizes, without affecting the entire plot.\n\nBeyond aesthetics, this flexibility extends to data as well; you can assign different datasets to individual layers, enabling you to overlay distinct visual representations in a single chart. This dynamic interplay between global and local settings is what makes ggplot2 so versatile, allowing you to tell a more nuanced data story.\n\n::: {.panel-tabset .nav-pills}\n## Add points color\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth() \n```\n:::\n\n\nThe color applies only to the points because it is specified in that geom. While the other aesthetics apply to both because they are specified in the global settings of the chart.\n\n## Add line static color\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(color= \"gold\", se= F) \n```\n:::\n\n\n## Subcompact only line\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(color= \"gold\", se= F) + \n  geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)\n\n```\n:::\n\n\nHere, our smooth line displays just a subset of the mpg dataset, the subcompact cars. The local data argument in geom_smooth() overrides the global data argument in ggplot() for that layer only. Just keep in mind that we are basically filtering only the subcompact cars to draw the line. This can be extremely powerful if you want to show how they perform compared to all the others.\n\n## Subcompact vs Others lines\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(color= \"gold\", se= F) + \n  geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)+\n  geom_smooth(data = filter(mpg, class != \"subcompact\"), se = FALSE, color=\"purple\")\n```\n:::\n\n:::\n\n::: {.panel-tabset .nav-pills}\n## Example 1\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = drv, y = hwy)) + \n     geom_violin(mapping= aes(fill=drv))+\n     geom_boxplot(color= \"darkred\", alpha= 0.3, width= 0.25)\n```\n:::\n\n\n## Example 2\n\n\n::: {.cell}\n```{webr}\nggplot(data = mpg, mapping = aes(y = hwy, x= displ)) + \n     geom_point(data= filter(mpg, manufacturer==\"dodge\"), color=\"gold3\")+\n     geom_smooth(mapping= aes(color=class ) , se= F)+\n     geom_point(data= filter(mpg, manufacturer==\"honda\"), color=\"purple3\")\n```\n:::\n\n\nCan you tell me what those car points are?\n\n## Example 3\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = class, y = cty)) + \n     geom_boxplot(mapping= aes(fill=fl))+\n     geom_violin(data= filter(mpg, class !=\"subcompact\"), mapping= aes(alpha=class), fill= \"pink\")+  \n     geom_violin(data= filter(mpg, class ==\"subcompact\"), mapping= aes(alpha=class), fill= \"lightblue\")\n```\n:::\n\n\nWhat do you think about this chart?\n\n## Example 4\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(y = hwy, x= displ)) + \n     geom_point(data= filter(mpg, class!=\"2seater\" | class!=\"minivan\"), color=\"gold3\")+\n     geom_point(data= filter(mpg, class==\"2seater\"), color=\"purple4\")+\n     geom_point(data= filter(mpg, class==\"minivan\"), color=\"green4\")+\n     geom_smooth(method = \"lm\", color=\"gold\")+\n     geom_smooth(data= filter(mpg, class==\"2seater\"), method = \"lm\", color= \"purple\")+\n  geom_smooth(data= filter(mpg, class==\"minivan\"), method = \"lm\", color= \"green3\")\n\n```\n:::\n\n\n::: callout-caution\nThis is a great chart to break the ice at the beginning of a presentation and ask people if they can guess what each line is representing. But you should manually create a legend if you put it into a report because it is not self-standing/explanatory. Only if we look at the code we know that those line indicate specific classes.\n:::\n:::\n\n#### Activity 4: Unleash ggplot power and control global and local mappings - 7 minutes:\n\n*\\[Write code just below each instruction; finally use MS Teams R - Forum channel for help on the in class activities/homework or if you have other questions\\]*\n\n::: {.panel-tabset .nav-pills}\n## Activity 4a.\n\nPlot the relationship of `cty` and `displ` with both a scatterplot, a smoothing line and a line chart. Do not replicate the mapping. Make sure the points color changes based on car `drv`. Make sure the smoothing line color is \"darkred\" and there is no shaded grey area around the line.. Make sure to show only the front wheel drive cars for the line chart and that the line is \"darkblue\".\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 4b.\n\nPlot the relationship between `cyl` and `cty` with both points and a smoothing line. Do not replicate the mapping. Make sure to assign a different color to the points based on car `trans`. Moreover, show a line only for the suv and a separate line for all the car classes that are not suv. Make sure to set se=TRUE. Make sure you can distinguish between the two lines.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 4c.\n\nPlot the relationship between engine size and cty with both points and a smoothing line. Do not replicate the mapping. Make sure to assign a different color and linetype to the line based on car drv. Moreover, show the points representing the audi manufacturer as \"gold2\" and the points representing all the other manufacturer as \"purple2\".\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 4d.\n\nPlot the distribution of engine size by transmission with both boxplot and a violin. Do not replicate the mapping. Make sure to assign a different fill based on `drv` to just the boxplot.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n:::\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{webr}\n#| autorun: false\n#| min-lines: 3\n\n\n#Code Practice Chunk\n\n```\n:::\n\n\n::: callout-important\n**I won't be covering or testing you on the material beyond this point, as it delves into more advanced topics**. However, I've made the \"Completing the chart\" and \"EDA in full circle\" sections below available for those of you who are captivated by the fascinating world of data visualization with ggplot and want to explore further.\n:::\n\n## Completing the chart\n\nThe charts we have created so far are definitely insightful and useful. However, they are missing some important final touches. Details can make a difference so now we will learn how to add them. The good news is that also in this case, adding them means adding a layer to our chart.\n\nWhile the idea is the same.. adding these details clearly enhance the complexity of the chart and it is important to execute one layer at the time if you run into errors.\n\n::: {.panel-tabset .nav-pills}\n## Axes name & chart title\n\nIn some scenario axis name equal to column names is enough. However, we can enhance the chart by making the axis name more intelligible for people that are not expert of `mpg` dataset. Finally, adding a title can help in explaining the chart purpose.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth( se = FALSE)+ \n  labs(\n    title = \"Uncovering the relationship between highway gas mileage and cars' engine size\",\n    subtitle = \"What is the impact of cars' type on it?\",\n    y = \"Highway miles per gallon\", x = \"Engine displacement in litres\",\n    color = \"Types of cars \"\n  ) \n  \n```\n:::\n\n\n## Annotations\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\ntrend_text <- \"Larger engine sizes tend to have lower fuel economy.\" |>\n  str_wrap(width = 30)\npotential_outliers <- mpg |>\n  filter(hwy > 40 | (hwy > 20 & displ > 5))\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_text_repel(data = potential_outliers, aes(label = model)) +\n  geom_point(data = potential_outliers) +\n  geom_point(\n    data = potential_outliers,\n    color = \"purple\", size = 4, shape = \"circle open\"\n  )+\n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(color=\"gold3\", se = FALSE)+ \n  labs(\n    title = \"Uncovering the relationship between highway gas mileage and cars' engine size\",\n    subtitle = \"What is the impact of cars' type on it?\",\n    y = \"Highway miles per gallon\", x = \"Engine displacement in litres\",\n    color = \"Types of cars \"\n  )+\n  annotate(\n    geom = \"label\", x = 3.5, y = 38,\n    label = trend_text,\n    hjust = \"left\", color = \"darkblue\"\n  ) +\n  annotate(\n    geom = \"segment\",\n    x = 3, y = 35, xend = 5, yend = 25, color = \"darkblue\",\n    arrow = arrow(type = \"closed\")\n  )  \n```\n:::\n\n\n## Scale color\n\nColor palette selection in charts can have a big impact on the chart readability for some individuals. Achromatopsia affects an estimated 1 in 30,000 people worldwide. By changing the color palette we can make an impact in those affected. Create accessible charts is extremely important to make sure everyone can appreciate your creation!\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_text_repel(data = potential_outliers, aes(label = model)) +\n  geom_point(data = potential_outliers) +\n  geom_point(\n    data = potential_outliers,\n    color = \"purple\", size = 4, shape = \"circle open\"\n  )+\n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(color=\"gold3\", se = FALSE)+ \n  labs(\n    title = \"Uncovering the relationship between highway gas mileage and cars' engine size\",\n    subtitle = \"What is the impact of cars' type on it?\",\n    y = \"Highway miles per gallon\", x = \"Engine displacement in litres\",\n    color = \"Types of cars \"\n  )+\n  annotate(\n    geom = \"label\", x = 3.5, y = 38,\n    label = trend_text,\n    hjust = \"left\", color = \"darkblue\"\n  ) +\n  annotate(\n    geom = \"segment\",\n    x = 3, y = 35, xend = 5, yend = 25, color = \"darkblue\",\n    arrow = arrow(type = \"closed\")\n  )  +\n  scale_color_colorblind()\n```\n:::\n\n\n## Chart theme\n\nFinally, the theme you chose for your chart can have big impact on it. As always, the option in ggplot are many. I personally prefer simplicity in charts but you can really have fun with them (even without taking into account those available in ggplot extensions). See the list [here](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_text_repel(data = potential_outliers, aes(label = model)) +\n  geom_point(data = potential_outliers) +\n  geom_point(\n    data = potential_outliers,\n    color = \"purple\", size = 4, shape = \"circle open\"\n  )+\n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(color=\"gold3\", se = FALSE)+ \n  labs(\n    title = \"Uncovering the relationship between highway gas mileage and cars' engine size\",\n    subtitle = \"What is the impact of cars' type on it?\",\n    y = \"Highway miles per gallon\", x = \"Engine displacement in litres\",\n    color = \"Types of cars \"\n  )+\n  annotate(\n    geom = \"label\", x = 3.5, y = 38,\n    label = trend_text,\n    hjust = \"left\", color = \"darkblue\"\n  ) +\n  annotate(\n    geom = \"segment\",\n    x = 3, y = 35, xend = 5, yend = 25, color = \"darkblue\",\n    arrow = arrow(type = \"closed\")\n  )  +\n  scale_color_colorblind()+ \n  theme_light()+\n  theme(legend.position = \"bottom\")+\n  guides(color = guide_legend(nrow = 1))\n```\n:::\n\n\nTry also the classic, bw, minimal and linedraw themes.. they are valid alternatives to theme light.\n:::\n\nIn past two weeks you have created charts in R and you have discovered how powerful the ggplot2 package is. If you are passionate about visualizations try to create similar charts using datasets of your interest. Remember that practice makes perfect. Moreover, you always need to explore and get to know your data before making any modeling on them. Charts will help you in visually exploring the variables in your dataset and the relationships among them. Welcome to the magic world of visualizations!\n\n## Exploratory Data Analysis (EDA) in full circle\n\nWe can close the EDA circle by putting together all that we have learned so far. Meaning can we combine manipulations and visualizations together? Of course yes, in fact in many cases you need to combine them to achieving your goal. Here you can find a couple of examples that require manipulating your data before visualizing them:\n\n::: {.panel-tabset .nav-pills}\n## Example 1\n\nCompute the avg_hwy per each class. Then visualize the average hwy per each class with a bar chart. Show a different filled color for each car class.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nmpg |> \n  group_by(class) |> \n  summarise(avg_hwy= mean(hwy)) |> \n  ggplot(aes(y=avg_hwy, x= reorder(class, -avg_hwy), fill= class))+\n  geom_col()+\n  labs(\n    title = \"Comparing types of cars' average highway gas mileage\",\n    y = \"Average highway miles per gallon\", x = \"Types of cars\",\n    fill = \"Types of cars \"\n  )  +\n  scale_fill_colorblind()+\n  theme_light()\n\n```\n:::\n\n\n## Example 2\n\nCompute the avg_hwy per each class. Then visualize the average hwy per each class with a bar chart. Show a different filled color for each car class.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\nmpg |> \n  group_by(class,drv) |> \n  summarise(avg_hwy= mean(hwy)) |> \n  ggplot(aes(y=avg_hwy, x= reorder(drv, -avg_hwy), fill= class))+\n  geom_col(position = \"dodge\")+\n  labs(\n    title = \"Comparing types of cars' average highway gas mileage\",\n    y = \"Average highway miles per gallon\", x = \"Types of cars\",\n    fill = \"Types of cars \"\n  )  +\n  scale_fill_colorblind()+\n  theme_light()\n\n```\n:::\n\n\n## Example 3\n\nCompute the avg_fuel_efficiency of the cars in the dataset. Then visualize the relationship between average fuel efficiency and displ with a scatterplot and smoothing line plot. Make sure to keep in the dataset only cars that have average fuel efficiency above 20. Show a different shape per each car drive train. Show a different smoothing line color per each car drv.\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| warning: false\n#| completion: true\n#| min-lines: 3\nmpg |> \n  mutate(avg_fuel_efficiency= (cty + hwy)/2) |> \n  filter(avg_fuel_efficiency>20) |> \n  ggplot(aes(y=avg_fuel_efficiency, x= displ))+\n  geom_point(aes(shape=drv), color=\"darkgreen\")+\n  geom_smooth(aes(color=drv), se=F)+\n  labs(\n    title = \"Uncovering the relationship between gas mileage and cars' engine size\",\n    subtitle = \"What is the impact of cars' drive train on it?\",\n    y = \"Average gas mileage\", x = \"Engine size in liters\",\n    color = \"Cars' drive train \", shape = \"Cars' drive train \"\n  )  +\n  scale_color_colorblind()+\n  theme_light()\n\n```\n:::\n\n\n## Example 4\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\ntrend_text <- \"Am I normal?\" |>\n  str_wrap(width = 10)\nmpg |> \n  mutate(avg_fuel_efficiency= (cty + hwy)/2) |> \n  ggplot(aes(x=avg_fuel_efficiency))+\n  geom_density(aes(fill= class))+\n  annotate(\n    geom = \"label\", x = 30, y = 0.4,\n    label = trend_text,\n    hjust = \"center\", color = \"darkred\"\n  )+\n  facet_wrap(~class, nrow=1)+\n  labs(\n    title = \"Uncovering the relationship between gas mileage and cars' engine size\",\n    subtitle = \"What is the impact of cars' drive train on it?\",\n    y = \"Average gas mileage\", x = \"Engine size in liters\",\n    color = \"Cars' drive train \", shape = \"Cars' drive train \"\n  )  +\n  scale_color_colorblind()+\n  theme_void()\n\n```\n:::\n\n:::\n\n#### Activity 5: It's creativity & advanced data viz time! - 10 minutes:\n\n*\\[Write code just below each instruction; finally use MS Teams R - Forum channel for help on the in class activities/homework or if you have other questions\\]*\n\nNow it's time to create your first advanced visualizations! Apply everything we've learned up to this point and use your creativity to design the most complex data visualizations of your life. The goal is to challenge yourself by combining techniques, experimenting with different aesthetics, and crafting meaningful charts that effectively communicates insights from your data.\n\n::: {.panel-tabset .nav-pills}\n## Activity 5a.\n\nCreate your first advanced visualization below:\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 5b.\n\nCreate your second advanced visualization below:\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 5c.\n\nCreate your third advanced visualization below:\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n\n## Activity 5d.\n\nCreate your fourth advanced visualization below:\n\n\n::: {.cell autorun='false' completion='true' min-lines='3'}\n```{webr}\n#| autorun: false\n#| completion: true\n#| min-lines: 3\n\n```\n:::\n\n:::\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{webr}\n#| autorun: false\n#| min-lines: 3\n\n\n#Code Practice Chunk\n\n```\n:::\n\n\n![**On completing another R coding class!**](gif/congrats.webp){fig-align=\"left\" width=\"700\"}\n\n\n\n<script src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js\"></script>\n<script>\n  var confettiTriggered = false;\n  var duration = 15 * 1000;\n  var animationEnd = Date.now() + duration;\n  var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n \n  function randomInRange(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n \n  // Function to start the confetti effect\n  function startConfetti() {\n    if (!confettiTriggered) {\n      confettiTriggered = true; // Prevent confetti from starting multiple times\n      var interval = setInterval(function() {\n        var timeLeft = animationEnd - Date.now();\n \n        if (timeLeft <= 0) {\n          clearInterval(interval); // Stop the animation when the duration ends\n        }\n \n        var particleCount = 50 * (timeLeft / duration);\n        // Since particles fall down, start a bit higher than random\n        confetti({ \n          ...defaults, \n          particleCount, \n          origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } \n        });\n        confetti({ \n          ...defaults, \n          particleCount, \n          origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } \n        });\n      }, 250);\n    }\n  }\n \n  // Event listener to detect when the user scrolls to the bottom of the page\n  window.addEventListener(\"scroll\", function() {\n    // Check if the user has scrolled to the bottom of the page\n    if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n      startConfetti();\n    }\n  });\n</script>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}